.f-c-b-orders-catalogue
  = catalogue(model, before_lambda: options[:before_lambda],
                     collection_actions: options[:collection_actions],
                     additional_columns_proc: additional_columns_proc)
    ruby:
      icon_class = 'f-c-b-orders-catalogue__icon'

      show_link(:number)

      attribute(:user) do
        content_tag(:div, class: "d-flex align-items-center") do
          account_icon = if record.user.present?
            link_to(url_for([:console, record.user])) do
              cell('boutique/ui/vector_icon',
                   icon_name: :person,
                   class: "mr-2 flex-shrink-0 #{icon_class}--person",
                   size: 16).show
            end
          end

          email = link_to("mailto:#{record.email}", title: record.email) do
            record.email.truncate(28, omission: '...')
          end

          [account_icon, email].compact.join(" ")
        end
      end

      attribute(:line_items) do
        content_tag(:div, class: "f-c-b-orders-catalogue__line-items") do
          if record.gift?
            gift_icon = cell('boutique/ui/vector_icon',
                             icon_name: :gift,
                             class: "mr-1 flex-shrink-0 #{icon_class}--gift",
                             size: 16).show
          end

          line_items = content_tag(:div, class: "flex-grow-1 flex-shrink-1") do
            record.line_items
                  .map(&:to_console_label)
                  .join(", ")
          end

          [gift_icon, line_items].compact.join(" ")
        end
      end

      attribute(:price) do
        price(record.total_price).gsub(/\s/, '&nbsp;')
      end

      attribute(:payment_method) do
        if record.is_paid?
          payment_method = content_tag(:div, class: 'd-flex') do
            recurring_icon = if record.line_items.exists?(subscription_recurring: true)
              cell('boutique/ui/vector_icon',
                   icon_name: :refresh,
                   class: "mr-1 flex-shrink-0 #{icon_class}--refresh",
                   size: 20).show
            end

            payment_method = if record.paid_payment.present?
              record.paid_payment.payment_method_to_human
            end

            [recurring_icon, payment_method].compact.join(' ')
          end

          voucher = if record.voucher.present?
            link_to t('.boutique/order.used_voucher', code: record.voucher.code),
                    url_for([:edit, :console, record.voucher]),
                    class: 'f-c-b-orders-catalogue__voucher'
          end

          [payment_method, voucher].compact.join(' ')
        end
      end

      date :confirmed_at
      date :paid_at

      state

      attribute(:invoice, compact: true) do
        if record.invoice_number?
          link_to(record.invoice_number,
                  controller.boutique.invoice_path(record.secret_hash),
                  target: "_blank")
        end
      end

      if model[:additional_columns_proc].present?
        model[:additional_columns_proc].call(self, record)
      end

      actions(:show, :edit)

      action = record.class.console_additional_index_action(record, self)
      if action.present?
        attribute(:actions, compact: true) do
          link_to("",
                  action[:url],
                  title: t("folio.console.actions.#{action[:name]}"),
                  class: "btn btn-light fa fa-#{action[:icon]} ml-n3",)
        end
      end
